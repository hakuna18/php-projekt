<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Pagerfanta\Pagerfanta;
use Pagerfanta\Adapter\DoctrineORMAdapter;
use AppBundle\Entity\Book;
use Pagerfanta\Adapter\ArrayAdapter;

/**
 * BooksRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BooksRepository extends EntityRepository
{
    // Looks for books with title/author/genre mathching given regex pattern.
    public function findByPattern($pattern, $page = 1) {
        $pattern = '/' . strtoupper(trim($pattern)) . '/';
        $result = array();
        // If regex valid
        if (@preg_match($pattern, null)) {
            $books = $this->findAll();   
            foreach($books as $book) {
                if(preg_match($pattern, strtoupper($book->getTitle()))
                || preg_match($pattern, strtoupper($book->getAuthor()))
                || preg_match($pattern, strtoupper($book->getGenre()))
                )
                    array_push($result, $book);
            }
        }
        $paginator = new Pagerfanta(new ArrayAdapter($result));
        $paginator->setMaxPerPage(Book::NUM_ITEMS);
        $paginator->setCurrentPage($page);

        return $paginator;
    }
     /**
     * Query all entities.
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    protected function queryAll()
    {
        return $this->createQueryBuilder('book');
    }

    /**
     * Save entity.
     *
     * @param \AppBundle\Entity\Book $book Book entity
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function save(Book $book)
    {
        $this->_em->persist($book);
        $this->_em->flush($book);
    }

    /**
     * Delete entity.
     *
     * @param \AppBundle\Entity\Book $book Book entity
     *
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function delete(Book $book)
    {
        $this->_em->remove($book);
        $this->_em->flush();
    }
}
